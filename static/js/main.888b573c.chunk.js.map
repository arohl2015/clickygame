{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","Navbar","href","score","highScore","App","state","characters","topScore","clicked","shufflePictures","pictures","i","length","j","Math","floor","random","cardClick","e","shuffleCards","idClicked","target","id","includes","setState","alert","concat","this","map","character","key","handleClick","handleIncrement","handleReset","handleShuffle","image","Component","ReactDOM","render","document","getElementById"],"mappings":"k3FAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,sBCa1BC,MAZf,SAAgBH,GACZ,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,OACX,uBAAGG,KAAK,IAAIH,UAAU,YAAtB,wBACA,wBAAIA,UAAU,YAAd,kEACA,wBAAIA,UAAU,YAAd,UAAiCD,EAAMK,MAAvC,kBAA6DL,EAAMM,c,uBCqEpEC,E,4MArEXC,MAAQ,CACNC,aACAJ,MAAO,EACPK,SAAU,EACVC,QAAS,I,EAGdC,gBAAkB,SAACC,GAChB,IAAK,IAAIC,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,G,EAKTO,UAAY,SAACC,GACX,EAAKC,aAAab,GAClB,IAAIc,EAAYF,EAAEG,OAAOC,GACrB,EAAKjB,MAAMG,QAAQe,SAASH,IAC9B,EAAKI,SAAS,CACZhB,QAAS,GACTN,MAAO,EACPI,WAAYA,IAEdmB,MAAM,sDAEF,EAAKpB,MAAMH,OAAS,EAAKG,MAAMF,UACjC,EAAKqB,SAAS,CACZtB,MAAO,EAAKG,MAAMH,MAAQ,EAC1BC,UAAW,EAAKE,MAAMH,MAAQ,EAC9BI,WAAYA,EACZE,QAAS,EAAKH,MAAMG,QAAQkB,OAAON,KAGrC,EAAKI,SAAS,CACZtB,MAAO,EAAKG,MAAMH,MAAQ,EAC1BI,WAAYA,EACZE,QAAS,EAAKH,MAAMG,QAAQkB,OAAON,M,uDAMjC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACElB,MAAOyB,KAAKtB,MAAMH,MAClBK,SAAUoB,KAAKtB,MAAME,WAEvB,kBAAC,IAAD,MACKoB,KAAKtB,MAAMC,WAAWsB,KAAI,SAAAC,GAAS,OAChC,kBAAC,IAAD,CACEC,IAAKD,EAAUP,GACfS,YAAa,EAAKA,YAClBC,gBAAiB,EAAKA,gBACtBC,YAAa,EAAKA,YAClBC,cAAe,EAAKA,cACpBZ,GAAIO,EAAUP,GACda,MAAON,EAAUM,gB,GAhEjBC,aCJlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.888b573c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Component for the Navbar\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <nav className=\"nav\">\r\n                <a href=\"/\" className=\"nav-item\"> 30 Rock Clicky Game</a>\r\n                <h3 className=\"nav-item\">Click an image to begin...just don't click the same one twice!</h3>\r\n                <h2 className=\"nav-item\">Score: {props.score} | High Score: {props.highScore}</h2>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","//setting all the react dependencies we're using and also importing component pages\nimport React, {Component} from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Navbar from \"./components/Navbar\";\nimport GameCard from \"./components/GameCard\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n    // Setting this.state.characters to the characters json array\n    // Also setting the state for the rest of our data that we're tracking\n    state = {\n      characters,\n      score: 0,\n      topScore: 0,\n      clicked: []  \n    };\n // The shuffle methods allows me to display these cards in random order after they are clicked\n shufflePictures = (pictures) => {\n    for (let i = pictures.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [pictures[i], pictures[j]] = [pictures[j], pictures[i]];\n    }\n    return pictures;\n  };\n  // Creating on click handler event to call the shuffle method every time I click on a picture\n  // A picture that has already been clicked will reset the game, one that hasn't will increment the score by 1\n  // The code will check the score against the top score and also keep track of which picture has been clicked\n  cardClick = (e) => {\n    this.shuffleCards(characters);\n    let idClicked = e.target.id;\n    if (this.state.clicked.includes(idClicked)) {\n      this.setState({\n        clicked: [],\n        score: 0,\n        characters: characters\n      });\n      alert(\"Oops, You already clicked this person. Try Again!\");\n    } else {\n      if (this.state.score >= this.state.highScore) {\n        this.setState({\n          score: this.state.score + 1,\n          highScore: this.state.score + 1,\n          characters: characters,\n          clicked: this.state.clicked.concat(idClicked)\n        });\n      } else {\n        this.setState({\n          score: this.state.score + 1,\n          characters: characters,\n          clicked: this.state.clicked.concat(idClicked)\n        });\n      };\n    };\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Jumbotron />\n            {this.state.characters.map(character => (\n                <GameCard\n                  key={character.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={character.id}\n                  image={character.image}\n                  />\n            ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}