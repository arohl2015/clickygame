{"version":3,"sources":["components/GameCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","App.js","index.js"],"names":["GameCard","props","className","onClick","onImgClick","id","alt","name","src","image","Wrapper","children","Navbar","href","currentScore","class","highestScore","App","state","characters","clicked","topScore","handleClick","includes","setState","push","shuffledCharacter","pictures","i","length","j","Math","floor","random","temp","shufflePicture","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"glFAiBeA,G,MAdE,SAAAC,GACf,OACE,yBAAKC,UAAU,UAAUC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC7D,yBAAKH,UAAU,eACb,yBACEI,IAAKL,EAAMM,KAAO,SAClBC,IAAKP,EAAMQ,MACXP,UAAU,mB,MCHLQ,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,WCgB1BC,G,MAjBA,SAAAX,GACb,OACE,yBAAKC,UAAU,uCAAuCG,GAAG,UACvD,uBAAGH,UAAU,eAAeW,KAAK,MAEjC,yBAAKX,UAAU,eACb,oDAEF,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,gBAAb,UAAoCD,EAAMa,cAC1C,yBAAKC,MAAM,QACX,uBAAGb,UAAU,YAAb,mBAAyCD,EAAMe,kB,UCkFxCC,E,4MA1EXC,MAAQ,CACNC,aACAC,QAAS,GACTN,aAAc,EACdO,SAAU,EACVL,aAAc,G,EAMlBM,YAAc,SAAAjB,GACR,EAAKa,MAAME,QAAQG,SAASlB,GAC5B,EAAKmB,SAAS,CACZJ,QAAS,GACTN,aAAc,EACdO,SAAU,KAGZ,EAAKH,MAAME,QAAQK,KAAKpB,GAExB,EAAKmB,SAAS,CACZV,aAAc,EAAKI,MAAMJ,aAAe,EACxCO,SAAU,EAAKH,MAAMG,SAAW,IAGhC,EAAKH,MAAMG,UAAY,GACvB,EAAKH,MAAMG,SAAW,EAAKH,MAAMF,cAEjC,EAAKQ,SAAS,CACZR,aAAc,EAAKE,MAAMG,a,uDAMvB,IAAD,OACCK,EAlDd,SAAwBC,GACpB,IAAK,IAAIC,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAASC,GACpBD,EAASC,GAAKD,EAASG,GACvBH,EAASG,GAAKI,EAEhB,OAAOP,EA2CuBQ,CAAeC,KAAKlB,MAAMC,YACpD,OACE,6BACE,kBAAC,EAAD,CACEL,aAAcsB,KAAKlB,MAAMJ,aACzBE,aAAcoB,KAAKlB,MAAMF,eAE3B,yBAAKd,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,+JAKF,yBAAKA,UAAU,OACf,yBAAKA,UAAU,aACb,kBAAC,EAAD,KACGwB,EAAkBW,KAAI,SAAAlB,GAAU,OAC/B,kBAAC,EAAD,CACEmB,IAAKnB,EAAWd,GAChBA,GAAIc,EAAWd,GACfI,MAAOU,EAAWV,MAClBF,KAAMY,EAAWZ,KACjBH,WAAY,kBAAM,EAAKkB,YAAYH,EAAWd,YAKtD,yBAAKH,UAAU,oB,GArEbqC,aCdlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7743b4ee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst GameCard = props => {\r\n  return (\r\n    <div className=\"picture\" onClick={() => props.onImgClick(props.id)}>\r\n      <div className=\"picture-img\">\r\n        <img\r\n          alt={props.name + \" Image\"}\r\n          src={props.image}\r\n          className=\"pictureImg\"\r\n        ></img>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light\" id=\"navBar\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n      </a>\r\n      <div className=\"text-center\">\r\n        <h2>30 Rock Memory Game</h2>\r\n      </div>\r\n      <div className=\"nav navbar-nav ml-auto\">\r\n        <p className=\"currentScore\">Score: {props.currentScore}</p>\r\n        <div class=\"nav\"></div>\r\n        <p className=\"topScore\"> Highest Score: {props.highestScore}</p>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;","//setting all the react dependencies we're using and also importing component pages\nimport React, {Component} from 'react';\nimport characters from \"./characters.json\";\nimport GameCard from \"./components/GameCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\n\n// The shuffle methods allows me to display these cards in random order after they are clicked\nfunction shufflePicture(pictures) {\n    for (var i = pictures.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = pictures[i];\n      pictures[i] = pictures[j];\n      pictures[j] = temp;\n    }\n    return pictures;\n  };\n\nclass App extends Component {\n    // Setting this.state.characters to the characters json array\n    // Also setting the state for the rest of our data that we're tracking\n    state = {\n      characters,\n      clicked: [],  \n      currentScore: 0,\n      topScore: 1,\n      highestScore: 0\n    };\n \n  // Creating on click handler event to call the shuffle method every time I click on a picture\n  // A picture that has already been clicked will reset the game, one that hasn't will increment the score by 1\n  // The code will check the score against the top score and also keep track of which picture has been clicked\n  handleClick = id => {\n    if (this.state.clicked.includes(id)) {\n        this.setState({\n          clicked: [],\n          currentScore: 0,\n          topScore: 1\n        });\n      } else {\n        this.state.clicked.push(id);\n  \n        this.setState({\n          currentScore: this.state.currentScore + 1,\n          topScore: this.state.topScore + 1\n        });\n        if (\n          this.state.topScore >= 0 &&\n          this.state.topScore > this.state.highestScore\n        ) {\n          this.setState({\n            highestScore: this.state.topScore\n          });\n        }\n      }\n    };\n\n    render() {\n        const shuffledCharacter = shufflePicture(this.state.characters);\n        return (\n          <div>\n            <Navbar\n              currentScore={this.state.currentScore}\n              highestScore={this.state.highestScore}\n            />\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <h4>Click on a character image to begin the game and increase your score. If you click on the same one more\n                    that once, game over!\n                  </h4>\n                  </div>\n                </div>\n                <div className=\"row\">\n                <div className=\"col-md-11\">\n                  <Wrapper>\n                    {shuffledCharacter.map(characters => (\n                      <GameCard\n                        key={characters.id}\n                        id={characters.id}\n                        image={characters.image}\n                        name={characters.name}\n                        onImgClick={() => this.handleClick(characters.id)}\n                      />\n                    ))}\n                  </Wrapper>\n                </div>\n                <div className=\"col-md-1\"></div>\n              </div>\n            </div>\n          </div>\n        );\n      }\n    }\n  \nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}